name: AaS Benchmark
version: "0.4.3"
about: A tool to benchmark pattern matching algorithms.
args:
    - ALGORITHMS:
        help: Set the algorithm(s) to be benchmarked, set multiple algorithms comma-seperated
        required: true
        index: 1
    - executions:
        help: Set how often the algorithm(s) are being executed, defaults to 1
        short: n
        long: executions
        takes_value: true
        value_name: executions
    - random_text:
        help: Generates a random text with the given length
        short: t
        long: tr
        takes_value: true
        value_name: length
    - seed:
        help: Enter a seed (unsigned 64-bit integer) for random generated text and patterns
        short: s
        long: seed
        takes_value: true
        value_name: seed
    - text_from_file:
        help: Load a text from a file
        long: tf
        takes_value: true
        value_name: file_name
    #- text_from_file_binary:
    #    help: Load a binary text from a file
    #    long: textfromfilebin
    #    takes_value: true
    #    value_name: file_name
    - random_pattern_from_text:
        help: Take one or multiple random parts from the text with given length(s) as patterns  (e.g. 10 for length 10 or 1..10 for lengths 1 to 10 or 1..10,2 for lengths 1 to 10 using step size 2)
        short: p
        long: prt
        takes_value: true
        value_name: lengths
    - multiple_random_patterns_from_text:
        help: Take multiple random parts from the text with given lengths as patterns, seperated by semicolons. Used for benchmarking algorithms that take multiple patterns.
        long: pmrt
        takes_value: true
        value_name: lengths
    - pattern_from_text:
        help: Takes a part from the text as a pattern using a given range (e.g. 0..10 for characters 0 to 9)
        long: pt
        takes_value: true
        value_name: range
    - pattern_from_argument:
        help: Set a UTF-8 string as a pattern
        long: pa
        takes_value: true
        multiple: true
        value_name: pattern
    - pattern_from_file:
        help: Load a pattern from a file
        long: pf
        takes_value: true
        value_name: file_name
    - random_pattern:
        help: Generate one or multiple random patterns with given length(s) (e.g. 10 for length 10 or 1..10 for length 1 to 10 or 1..10,2 for lengths 1 to 10 using step size 2)
        long: pr
        takes_value: true
        value_name: lengths
    - alphabet:
        help: Set the alphabet used by the algorithm(s) by supplying a comma-seperated list of characters (escape \\ and \,), e.g. `-a A,C,G,T`. If you also supply a text and pattern yourself, both of those must not contain any other characters. Defaults to 256 characters.
        short: a
        long: alphabet
        takes_value: true
        value_name: alphabet
    - suffix_array_algorithm:
        help: Specify how a suffix array should be generated (only used for `sa-` and `bwt-` algorithms), defaults to `sais`
        long: suffixarray
        takes_value: true
        value_name: suffix_array_algorithm
    - occ_block_size:
        help: Specify the block size of the Occ array (only used for the `bwt-match-k` algorithm), defaults to 1
        long: occblocksize
        takes_value: true
        value_name: block_size
    - maximum_error:
        help: Specify the maximum allowed error for approximative algorithms, defaults to 0
        long: maxerror
        takes_value: true
        value_name: maximum_error
    - no_header:
        help: Do not print a header row for the comma-seperated values output
        long: noheader
        takes_value: false
